[{"/home/shanur/Documents/personal/paypal/src/reportWebVitals.js":"1","/home/shanur/Documents/personal/paypal/src/App.js":"2","/home/shanur/Documents/personal/paypal/src/components/Container.js":"3","/home/shanur/Documents/personal/paypal/src/components/Card.js":"4","/home/shanur/Documents/personal/paypal/src/components/slider.js":"5","/home/shanur/Documents/personal/paypal/src/components/slider-wrapper.js":"6"},{"size":362,"mtime":1607977954676,"results":"7","hashOfConfig":"8"},{"size":642,"mtime":1608044587205,"results":"9","hashOfConfig":"8"},{"size":229,"mtime":1608041194241,"results":"10","hashOfConfig":"8"},{"size":327,"mtime":1608041558922,"results":"11","hashOfConfig":"8"},{"size":4882,"mtime":1608044610917,"results":"12","hashOfConfig":"8"},{"size":230,"mtime":1608042992987,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1143grn",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shanur/Documents/personal/paypal/src/reportWebVitals.js",[],"/home/shanur/Documents/personal/paypal/src/App.js",[],"/home/shanur/Documents/personal/paypal/src/components/Container.js",[],"/home/shanur/Documents/personal/paypal/src/components/Card.js",[],"/home/shanur/Documents/personal/paypal/src/components/slider.js",["27","28"],"import { Component, cloneElement, Children } from \"react\";\nimport CardWrapper from \"./card-wrapper\";\nimport SliderList from \"./slider-list\";\nimport SliderTrack from \"./slider-track\";\nimport SliderWrapper from './slider-wrapper';\nimport PropTypes from 'prop-types';\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.updateResponsiveView = this.updateResponsiveView.bind(this);\n    this.state = {\n      initialCard: 0,\n      childWidth: 0,\n      cardsToShow: 0,\n      hideArrows: false,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      children,\n      cardsToShow: cardsToShowProp,\n      autoSlide,\n      hideArrowsOnNoSlides,\n    } = this.props;\n    const numberOfChildren = children ? children.length || 1 : 0;\n    const cardsToShow = cardsToShowProp || numberOfChildren;\n    const childWidth = 100 / cardsToShow;\n\n    /** @Todo to replace this with setState hooks */\n    this.setState(\n      {\n        childWidth,\n        cardsToShow,\n        hideArrows: hideArrowsOnNoSlides && numberOfChildren <= cardsToShow,\n      },\n      () => this.updateResponsiveView()\n    );\n\n    typeof window !== \"undefined\" &&\n      window.addEventListener(\"resize\", this.updateResponsiveView);\n\n    if (autoSlide) {\n      //    start autoslider\n    }\n  }\n\n  updateResponsiveView() {\n    const { children, hideArrowsOnNoSlides } = this.props;\n\n    //   breakpoints capture\n    let { responsive } = this.props;\n\n    const numberOfChildren = children ? children.length || 1 : 0;\n\n    if (responsive) {\n      //   apply responsiveness here using the breakpoints\n    }\n  }\n\n  renderChildren(children) {\n    const { childWidth } = this.state;\n    const displayCards = [];\n    Children.forEach(children, (child, index) => {\n      displayCards.push((\n        <CardWrapper key={index} width={childWidth}>\n          {child}\n        </CardWrapper>\n      ));\n    });\n    return displayCards;\n  }\n\n\n  renderLeftArrow() {\n    const { LeftArrow, infinite } = this.props;\n    const { initialCard } = this.state;\n    return cloneElement(LeftArrow, {\n      onClick: this.handleLeftArrowClick,\n      disabled: !infinite && !initialCard,\n    });\n  }\n\n  renderRightArrow() {\n    const { RightArrow, children, infinite } = this.props;\n    const numberOfChildren = children ? children.length || 1 : 0;\n    const { initialCard, cardsToShow } = this.state;\n    return cloneElement(RightArrow, {\n      onClick: this.handleRightArrowClick,\n      disabled: !infinite && (initialCard + cardsToShow === numberOfChildren),\n    });\n  }\n\n\n  render() {\n    const {\n        children, cardsToShow,\n        showDots, showArrows,\n        pauseOnMouseOver, DotsWrapper,\n        ...otherProps\n      } = this.props;\n\n      const { initialCard, childWidth } = this.state;\n\n      return <div\n      onMouseLeave={() => pauseOnMouseOver && this.autoSlider && this.autoSlider.resume()}\n      onMouseEnter={() => pauseOnMouseOver && this.autoSlider && this.autoSlider.pause()}\n    >\n      <SliderWrapper {...otherProps}>\n        {showArrows && !this.state.hideArrows && this.renderLeftArrow()}\n        <SliderTrack>\n          <SliderList translateX={initialCard * childWidth}>\n            {this.renderChildren(children, cardsToShow || children.length)}\n          </SliderList>\n        </SliderTrack>\n        {showArrows && !this.state.hideArrows && this.renderRightArrow()}\n      </SliderWrapper>\n      <DotsWrapper>\n        {showDots && this.renderDots()}\n      </DotsWrapper>\n    </div>\n  }\n\n  renderDots() {\n    const dots = [];\n    const { children, Dot } = this.props;\n    const numberOfChildren = children ? children.length || 1 : 0;\n    \n    // calculate click count to reach the end, show those many dots; or push dot component to the array of dots as per ui\n    let i;\n    for (i = 0; i <= numberOfChildren - this.state.cardsToShow; i += 1) {\n      const index = i;\n      dots.push(cloneElement(Dot, {\n        active: index === this.state.initialCard,\n        key: index,\n        onClick: () => this.changeInitialCard(index),\n      }));\n    }\n    return dots;\n  }\n\n}\n\n\n/** @Todo configure this */\nSlider.defaultProps = {};\n\nSlider.propTypes = {\n  LeftArrow: PropTypes.node,\n  RightArrow: PropTypes.node,\n  Dot: PropTypes.node,\n  showArrows: PropTypes.bool,\n  showDots: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  cardsToShow: PropTypes.number,\n  afterSlide: PropTypes.func,\n  beforeSlide: PropTypes.func,\n  infinite: PropTypes.bool,\n  responsive: PropTypes.arrayOf(PropTypes.shape({\n    breakPoint: PropTypes.number,\n    cardsToShow: PropTypes.number,\n  })),\n  autoSlide: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.bool,\n  ]),\n  pauseOnMouseOver: PropTypes.bool,\n  padding: PropTypes.string,\n  margin: PropTypes.string,\n  hideArrowsOnNoSlides: PropTypes.bool,\n  DotsWrapper: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.object,\n  ]),\n};\n\n\nexport default Slider;","/home/shanur/Documents/personal/paypal/src/components/slider-wrapper.js",[],{"ruleId":"29","severity":1,"message":"30","line":50,"column":23,"nodeType":"31","messageId":"32","endLine":50,"endColumn":43},{"ruleId":"29","severity":1,"message":"33","line":55,"column":11,"nodeType":"31","messageId":"32","endLine":55,"endColumn":27},"no-unused-vars","'hideArrowsOnNoSlides' is assigned a value but never used.","Identifier","unusedVar","'numberOfChildren' is assigned a value but never used."]